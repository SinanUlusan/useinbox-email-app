import Head from "next/head";
import axios from "axios";
import React, { useState } from "react";
import "../../styles/Home.module.css";
import { Collapse, Alert, IconButton } from "@mui/material";
import { CloseOutlined } from "@material-ui/icons";
import CONSTANTS from "../constant/constant";

export default function Template() {
  const [from, setFrom] = useState({ name: "", email: "" });
  const [subject, setSubject] = useState("");
  const [content, setContent] = useState("");
  const [success, setSuccess] = useState(false);
  const [successMessage, setSuccessMessage] = useState("");
  const [error, setError] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [emptyError, setEmptyError] = useState(false);

  const handleSubmit = (e) => {
    e.preventDefault();

    if (
      from.name.length === 0 ||
      from.email.length === 0 ||
      subject.length === 0 ||
      content.length === 0
    ) {
      setEmptyError(true);
      return;
    }

    setLoading(true);

    const raw = JSON.stringify({
      from: {
        name: e.target.value,
        email: e.target.value,
      },
      to: from.email,
      subject: e.target.value,
      htmlContent: `<html><body><h3>From: ${from.email}</h3><p>${content}</p></body></html>`,
    });

    axios({
      url: "https://useapi.useinbox.com/notify/v1/send",
      method: "POST",
      headers: {
        Authorization: `Bearer ${CONSTANTS.TOKEN}`,
        "Content-Type": "application/json",
      },
      body: raw,
    })
      .then(function (response) {
        setSuccessMessage(response.data.resultMessage);
        setLoading(false);
        setSuccess(true);
        console.log("response", response);
      })
      .catch(function (error) {
        setErrorMessage(error.response.statusText);
        setLoading(false);
        setError(true);
        console.log("error", error);
      });
  };
  return (
    <div className="template">
      <Head>
        <title>Useinbox API Email App</title>
        <meta name="description" content="Generated by create next app" />
        <meta charSet="utf-8" />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap"
        />
        <link
          rel="stylesheet"
          href="https://fonts.googleapis.com/icon?family=Material+Icons"
        />
      </Head>
      <form onSubmit={handleSubmit} className="form">
        <h1>Email Form</h1>
        <label>Name</label>
        <input
          value={from.name}
          onChange={(e) => setFrom({ ...from, name: e.target.value })}
          placeholder="Name"
        />
        <label>Email</label>
        <input
          value={from.email}
          onChange={(e) => setFrom({ ...from, email: e.target.value })}
          placeholder="Email"
        />
        <label>Subject</label>
        <input
          value={subject}
          onChange={(e) => setSubject(e.target.value)}
          placeholder="Subject"
        />
        <label>Message</label>
        <textarea
          value={content}
          onChange={(e) => setContent(e.target.value)}
          placeholder="Message"
        />
        <button type="submit">
          {!loading && "Submit"}{" "}
          {loading && <div style={{ padding: "10px" }} />}
        </button>
      </form>
      <Collapse className="errorBlock" in={success}>
        <Alert
          action={
            <IconButton
              aria-label="close"
              color="inherit"
              size="small"
              onClick={() => {
                setSuccess(false);
              }}
            >
              <CloseOutlined fontSize="inherit" />
            </IconButton>
          }
          sx={{ mb: 2 }}
        >
          {successMessage}
        </Alert>
      </Collapse>
      <Collapse in={error}>
        <Alert
          severity="error"
          action={
            <IconButton
              aria-label="close"
              size="small"
              onClick={() => {
                setError(false);
              }}
            >
              <CloseOutlined fontSize="inherit" />
            </IconButton>
          }
          sx={{ mb: 2 }}
        >
          {errorMessage}
        </Alert>
      </Collapse>
      <Collapse className="errorBlock" in={emptyError}>
        <Alert
          severity="error"
          action={
            <IconButton
              aria-label="close"
              size="small"
              onClick={() => {
                setEmptyError(false);
              }}
            >
              <CloseOutlined fontSize="inherit" />
            </IconButton>
          }
          sx={{ mb: 2 }}
        >
          Fill all fields
        </Alert>
      </Collapse>
    </div>
  );
}
